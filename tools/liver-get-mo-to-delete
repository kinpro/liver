#!/usr/bin/python
# -*- coding:utf-8 -*-

# Author: Pablo Abelenda
# Contact: pablo.abelenda@interoud.com
#
# Maintainer: Pablo Saavedra
# Contact: pablo.saavedra@interoud.com

import os
import sys

reload(sys)
sys.setdefaultencoding('utf-8')

from httplib2 import Http
from urllib import urlencode
from optparse import OptionParser
import ConfigParser
import simplejson as json

def get_http_requester():
    try:
        h = Http(timeout=10)
    except Exception:
        h = Http()
    return h


hostname = "localhost"
port = "80"
storage_base_dir = "/storage/videos"
username = "user"
password = "password"
ssl = False
logfile = "/dev/stdout"
loglevel = 20


# command line options parser ##################################################

parser = OptionParser()
parser.add_option("-H", "--hostname", 
        dest="hostname", default=hostname,
        help="ASM hostname (default: %s)" % hostname)
parser.add_option("-P", "--port", 
        dest="port", help="ASM port number (default: %s)" % port, 
        default=port)
parser.add_option("-l", "--logfile",
        dest="logfile", help="Log file (default: %s)" % logfile,
        default=logfile)
parser.add_option("--loglevel",
        dest="loglevel", help="Log level (default: %s)" % loglevel,
        default=loglevel)
parser.add_option("-u", "--username",
        dest="username", help="Username to login into ASM (default: %s)" % username,
        default=username)
parser.add_option("-p", "--password",
        dest="password", help="Password to login into ASM (default: %s)" % password,
        default=password)
parser.add_option("--storagebasedir", 
        dest="storage_base_dir", help="Storage basedir (default: %s)" % storage_base_dir,
        default=storage_base_dir)
parser.add_option("--ssl", 
        dest="ssl", help="SSL ON/OFF (default: %s)" % ssl,
        action="store_true",
        default=ssl)
(options, args) = parser.parse_args()

hostname = options.hostname
port = options.port
storage_base_dir = options.storage_base_dir
username = options.username
password = options.password
ssl = options.ssl
logfile = options.logfile
loglevel = options.loglevel

# logging ######################################################################
import logging
hdlr = logging.FileHandler(logfile)
hdlr.setFormatter(logging.Formatter('%(levelname)s %(asctime)s %(message)s'))
logger = logging.getLogger('asm')
logger.addHandler(hdlr)
logger.setLevel(int(loglevel))

# setting up ###################################################################

logger.info("Default encoding: %s" % sys.getdefaultencoding())

asm_http_base="http://" + hostname + ":" + port
if ssl:
    asm_http_base="https://" + hostname + ":" + port
logger.info("ASM base URL: %s" % asm_http_base)

autentURL = "%s/api/external/login/" % ( asm_http_base )
getMoToDeleteURL = "%s/api/external/get_mo_to_delete" % ( asm_http_base )

authData = {'username': username, 'password': password}
headers = {'User-Agent': 'asm-get-mo-to-delete'}


# main action ##################################################################

h = get_http_requester()
try:
    resp, content = h.request(autentURL, "POST", urlencode(authData), headers=headers)
except Exception, e:
    logger.error("Error in authentication: %s " % repr(e))
    sys.exit(-1)

if resp.has_key('set-cookie'):
    cookie=resp['set-cookie']
    headers['Cookie'] = cookie
else:
    logger.error("No cookie recovered from server")
    sys.exit(-1)

try:
    h = get_http_requester()
    resp, content = h.request(getMoToDeleteURL, "GET", None , headers=headers)
    logger.debug("Response: %s" % resp)
    logger.debug("Content: %s" % content)
    j_content=json.loads(content)
    logger.debug("Result: %s" % j_content["result"])

    media_to_delete=j_content["response"]
    for i in media_to_delete:
        try:
            logger.info( "Removing %s from the hard disk" % ( os.path.join(storage_base_dir, i) ))
            os.remove( os.path.join(storage_base_dir, i))
        except Exception, e:
            logger.error( "Failed removing %s: %s" % ( os.path.join(storage_base_dir, i), repr(e)))

except Exception, e:
    logger.error("Errors during response procesing for '%s' org: %s" % (org, repr(e)))




